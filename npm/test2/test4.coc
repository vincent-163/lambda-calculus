# Forces typecheck
Test=Type:* a:Type *
# Logic not
not=P:* T.* (.P T)

xx=
# The Peano axioms
Nat:* # 0
Zero:Nat # 1
Succ:.Nat Nat # 2
Equal:(.Nat .Nat *) # 3
EqualRfl: x.Nat (Equal x x) # 4
EqualTrans: x.Nat y.Nat z.Nat .(Equal x y) .(Equal y z) (Equal x z) # 5
SuccInj:x.Nat y.Nat .(Equal (Succ x) (Succ y)) (Equal x y) # 6
SuccNeqZero:x.Nat (not (Equal (Succ x) Zero)) # 7
Induction:P.(.Nat *) .(P Zero) .(n.Nat (P (Succ n))) n.Nat (P n) # 8

# For first order theory, plus and multiplication are added as axioms
Plus:(.Nat .Nat Nat) # 9
PlusBase: n.Nat (Equal (Plus Zero n) n) # 10
PlusSucc: a.Nat n.Nat (Equal (Plus (Succ a) n) (Succ (Plus a n))) # 11
Mul:(.Nat .Nat Nat) # 12
MulBase: n.Nat (Equal (Mul Zero n) n) # 13

# TODO: make MulSucc pass
MulSucc: a.Nat n.Nat (Equal (Mul (Succ a) n) (Plus n (Mul a n)))

# Prove 1+1=2!
One=(Succ Zero)
Two=(Succ (Succ Zero))
OnePlusOne=(Plus One One)

x_1p1es0p1=(PlusSucc Zero One)
#(Test (Equal (Plus One One) (Succ (Plus Zero One))) x_1p1es0p1)
x_0p1e1=(PlusBase One)
#(Test (Equal (Plus Zero One) One) x_0p1e1)
x_s0p1e2=(EqualRfl (Plus Zero One))

# the proof
OnePlusOneEqualsTwo=(EqualTrans (Plus One One) (Succ (Plus Zero One)) Two x_1p1es0p1 x_0p1e1)
#(Equal (Plus Zero One) One)
# x_0p1e1
#(Test (Equal OnePlusOne Two) OnePlusOneEqualsTwo)
# (EqualTrans (Plus One One) (Succ (Plus Zero One)) Two x_1p1es0p1)
x_1p1es0p1
xx