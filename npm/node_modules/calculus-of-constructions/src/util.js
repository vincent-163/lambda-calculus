var Lang = require("./lang.js");

// A list of files where terms can reference on each-other.
var files = {
  "NAT": "(Nat. * Succ. (.Nat Nat) Zero. Nat Nat)",
  "C0": "(N:* S:(.N N) Z:N Z)",
  "C1": "(N:* S:(.N N) Z:N (S Z))",
  "PAIR": "(T:* P:(.NAT .NAT T) (P C0 C1))"
}

// Parses those files, returns the resulting terms.
var terms = Lang.read(files);

// Name of combinators we know.
var nameOf = {}
for (var name in files)
  nameOf[Lang.show(terms[name])]Â = name;

// Stringifies the PAIR term, naming combinators inside it.
var shown = Lang.show(
  terms.PAIR,

  // Gives a name to known combinators (other than itself)
  comb => {
    if (nameOf[Lang.show(comb)] !== "PAIR")
      return nameOf[Lang.show(comb)]
  });

console.log(shown);

// Notice that inside 
console.log(shown === "(a:* (a:(.NAT (.NAT a)) (a C0 C1)))");
