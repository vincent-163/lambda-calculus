#!/usr/bin/env node

// Command line interface.
// Usage: coc eval file_name

var fs = require("fs");
var CoC = require("./main.js");
var path = require("path");
var args = process.argv.slice(2);

var files = {"$main$": args.pop()};
// var files = {"$main$": "exp"};
fs.readdirSync(process.cwd()).forEach(function(name) {
  if (name.slice(-4) === ".coc")
    files[name.slice(0, -4)] = fs.readFileSync(path.join(process.cwd(), name), "utf8");
    // files[name.slice(0, -4)] = path.join(process.cwd(), name);
});

var terms = CoC.read(files);

var nameOf = {};
for (var name in terms)
  nameOf[CoC.show(terms[name])] = name;

if (args[0] === "help") {
  console.log("Usage:");
  console.log("$ coc term           # shows the base form of term.coc");
  console.log("$ coc type term      # shows the type of term.coc");
  console.log("$ coc norm term      # shows the normal form of term.coc");
  console.log("$ coc full term      # fully shows the base form of term.coc");
  console.log("$ coc full type term # fully shows the type of term.coc");
  console.log("$ coc full norm term # fully shows the normal form of term.coc");
}

var full = false;
if (args[0] === "full") {
  full = true;
  args.shift();
}

var map = function(x) { return x; };
if (args[0] === "type") {
  map = CoC.type;
  args.shift();
}
if (args[0] === "norm") {
  map = CoC.norm;
  args.shift;
};

var res = map(terms["$main$"]);
console.log(CoC.show(res, function(comb) {
  return !full && nameOf[CoC.show(comb)] !== "$main$" && nameOf[CoC.show(comb)];
}));

let fib = [1, 2, 3, 5, 8, 13, 21, 34];

function complexity(res) {
  switch(res.ctor) {
    case 0: {
      // for(let i = 0; i < fib.length; i+=1) if(fib[i] >= res.idx+1) return 1+i+3;
      // return 1000;
      return 3+res.idx;
    }
    case 1: return complexity(res.fun)+complexity(res.arg)+2;
    case 2: return complexity(res.typ)+complexity(res.bod)+2;
    case 3: return complexity(res.typ)+complexity(res.bod)+2;
    case 5: return 3;
    default: return NaN;
  }
}
function toName(nat) {
  var alphabet = "abcdefghijklmnopqrstuvwxyz";
  var name = "";
  do {
    name += alphabet[nat % alphabet.length];
    nat = Math.floor(nat / alphabet.length);
  } while (nat > 0);
  return name;
};
function concise(res) {
  switch(res.ctor) {
    case 0: return toName(res.idx)+";";
    case 1: return "%"+concise(res.fun)+concise(res.arg);
    case 2: return "λ"+concise(res.typ)+concise(res.bod);
    case 3: return "∀"+concise(res.typ)+concise(res.bod);
    case 5: return "#";
    default: return "?";
  }
}
console.log(concise(res));
console.log(complexity(res));